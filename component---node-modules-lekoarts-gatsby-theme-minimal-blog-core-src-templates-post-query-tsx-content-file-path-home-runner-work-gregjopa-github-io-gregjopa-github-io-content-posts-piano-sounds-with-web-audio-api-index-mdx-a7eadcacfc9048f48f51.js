"use strict";(self.webpackChunkgregjopa_github_io=self.webpackChunkgregjopa_github_io||[]).push([[956],{8804:function(e,t,n){n.d(t,{F:function(){return m},Z:function(){return d}});var a=n(7294),o=n(8733),r=n(795),l=n(6920),s=n(6799),i=n(8871);var c=e=>{let{post:t}=e;return null};const u=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var h=e=>{let{data:{post:t},children:n}=e;return(0,o.tZ)(l.Z,null,(0,o.tZ)(r.X6,{as:"h1",variant:"styles.h1"},t.title),(0,o.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,o.tZ)("time",null,t.date),t.tags&&(0,o.tZ)(a.Fragment,null," â€” ",(0,o.tZ)(s.Z,{tags:t.tags}))),(0,o.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:u.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},n),(0,o.tZ)(c,{post:t}))};const m=e=>{var t,n,a;let{data:{post:r}}=e;return(0,o.tZ)(i.Z,{title:r.title,description:r.description?r.description:r.excerpt,image:r.banner?null===(t=r.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.resize)||void 0===a?void 0:a.src:void 0,pathname:r.slug,canonicalUrl:r.canonicalUrl})};function d(e){let{...t}=e;return a.createElement(h,t)}},6799:function(e,t,n){var a=n(8733),o=n(7294),r=n(1883),l=n(3494),s=n(9706);t.Z=e=>{let{tags:t}=e;const{tagsPath:n,basePath:i}=(0,l.Z)();return(0,a.tZ)(o.Fragment,null,t.map(((e,t)=>(0,a.tZ)(o.Fragment,{key:e.slug},!!t&&", ",(0,a.tZ)(r.Link,{sx:e=>{var t;return{...null===(t=e.styles)||void 0===t?void 0:t.a}},to:(0,s.Z)("/"+i+"/"+n+"/"+e.slug)},e.name)))))}},8871:function(e,t,n){var a=n(7294),o=n(1883),r=n(4232);t.Z=e=>{let{title:t="",description:n="",pathname:l="",image:s="",children:i=null,canonicalUrl:c=""}=e;const u=(0,r.Z)(),{siteTitle:h,siteTitleAlt:m,siteUrl:d,siteDescription:p,siteImage:f,author:g}=u,b={title:t?t+" | "+h:m,description:n||p,url:""+d+(l||""),image:""+d+(s||f)};return a.createElement(a.Fragment,null,a.createElement("title",null,b.title),a.createElement("meta",{name:"description",content:b.description}),a.createElement("meta",{name:"image",content:b.image}),a.createElement("meta",{property:"og:title",content:b.title}),a.createElement("meta",{property:"og:url",content:b.url}),a.createElement("meta",{property:"og:description",content:b.description}),a.createElement("meta",{property:"og:image",content:b.image}),a.createElement("meta",{property:"og:type",content:"website"}),a.createElement("meta",{property:"og:image:alt",content:b.description}),a.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),a.createElement("meta",{name:"twitter:title",content:b.title}),a.createElement("meta",{name:"twitter:url",content:b.url}),a.createElement("meta",{name:"twitter:description",content:b.description}),a.createElement("meta",{name:"twitter:image",content:b.image}),a.createElement("meta",{name:"twitter:image:alt",content:b.description}),a.createElement("meta",{name:"twitter:creator",content:g}),a.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,o.withPrefix)("/favicon-32x32.png")}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,o.withPrefix)("/favicon-16x16.png")}),a.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,o.withPrefix)("/apple-touch-icon.png")}),c?a.createElement("link",{rel:"canonical",href:c}):null,i)}},6955:function(e,t,n){n.r(t),n.d(t,{Head:function(){return i.F},default:function(){return c}});var a=n(7294),o=n(1151),r=n(2545);function l(e){const t=Object.assign({p:"p",a:"a",h3:"h3",ol:"ol",li:"li",ul:"ul",pre:"pre",code:"code"},(0,o.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,a.createElement(t.a,{href:"/2023/01/piano-flash-cards-react-app"},"In my last post I shared the Piano Flash Card app")," I built with React and Vexflow. In this post I'll share how I used the Web Audio API to add audio to this app to play realistic piano sounds."),"\n",a.createElement(r.Z,{downloadLink:"https://github.com/gregjopa/piano-flash-cards",downloadText:"Source code",demoLink:"https://www.gregjopa.com/piano-flash-cards/",demoText:"Play the game"}),"\n",a.createElement(t.h3,null,"Goals with adding Audio"),"\n",a.createElement(t.p,null,"Here's what I wanted to accomplish with adding sound to this flash card app:"),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"When guessing the note name, play the sound of the note so users can tie the sound to the visual representation of the note on the treble/bass clef."),"\n",a.createElement(t.li,null,"Play a happy sound when the user guesses the correct note and play a sad sound for incorrect guesses."),"\n",a.createElement(t.li,null,"Update the keyboard to be interactive so it plays the note when the key is pressed."),"\n"),"\n",a.createElement(t.h3,null,"Using Audio Samples"),"\n",a.createElement(t.p,null,"For this project, I wanted the audio to sound like a piano as much as possible. At first, I considered synthesizing notes using oscillators and filters but that proved to be quite difficult to produce something that resembles a piano. So instead, I chose to use free audio samples that were recorded from a real piano.\nI searched around the internet and found piano sounds that were recorded from a Yamaha C5 Grand Piano. These Salamander Grand Piano samples were created by Alexander Holm under the Creative Commons license. Here are the relevant links:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://archive.org/details/SalamanderGrandPianoV3"},"https://archive.org/details/SalamanderGrandPianoV3")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://sfzinstruments.github.io/pianos/salamander"},"https://sfzinstruments.github.io/pianos/salamander")),"\n",a.createElement(t.li,null,a.createElement(t.a,{href:"https://github.com/sfzinstruments/SalamanderGrandPiano/"},"https://github.com/sfzinstruments/SalamanderGrandPiano/")),"\n"),"\n",a.createElement(t.p,null,"I added these samples to my app and decided to support mp3 and ogg file formats to attempt to support as many browsers as possible. Here's an example of how we can load a sample and play it with the Web Audio API:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},'fetch("/piano-flash-cards/audio/C4v10.mp3")\n  .then((response) => response.arrayBuffer())\n  .then((buffer) => audioContext.decodeAudioData(buffer))\n  .then((sample) => {\n    const source = audioContext.createBufferSource();\n    source.buffer = sample;\n    source.connect(audioContext.destination);\n    source.start(0);\n  });\n')),"\n",a.createElement(t.p,null,"One thing I wanted to avoid was forcing the user to download 88 different samples to support the 88 possible notes on a piano. I do not want users to have to download 88 different mp3 files. This is where pitch shifting comes in. I can leverage a single sample to play multiple different notes by shifting the pitch of the sound."),"\n",a.createElement(t.h3,null,"Pitch Shifting with the Web Audio API"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Pitch_shift"},"Pitch shifting")," is a technique that can raise or lower the pitch of a sound. To strike a balance between sound quality and performance, I chose to pitch shift a single sample to play up to 12 different notes. That way 700 cents is the most I will have to shift the pitch of a note. The concern is that anything more will reduce the quality of the piano sound."),"\n",a.createElement(t.p,null,"Here's an example to help illustrate the pitch shifting strategy. Let's assume we have a sample playing a C note on the 4th octave. We can give this C4 note a value of 0 and then count the number of semitones away from this base value to determine how much this note needs to be shifted. Here are a few examples:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"C#4 - this note is one semitone above C4 so its note value is one and we can shift it up 100 cents."),"\n",a.createElement(t.li,null,"B#3 - this note is one semitone below C4 so we can shift it down 100 cents."),"\n",a.createElement(t.li,null,"F4 - this note is 6 semitones above C4 so we can shift it up 600 cents."),"\n"),"\n",a.createElement(t.p,null,"Here's the full scale with note names and values:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"-7  -6  -5  -4  -3  -2  -1   0  1   2  3   4  5   6\nF#   G   G#  A   A#  B   B#  C  C#  D  D#  E  E#  F\n")),"\n",a.createElement(t.p,null,"The Web Audio API provides a ",a.createElement(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune"},"detune")," property on the AudioBufferSourceNode to make it easy to shift the pitch of a sample. Here's an example of how it works:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-ts"},"  playTone(noteValue: number, sample: AudioBuffer) {\n    const source = audioContext.createBufferSource();\n    // use the best C note sample based on the octave and note value\n    source.buffer = sample;\n\n    // use the note value to calculate how many cents to detune the note\n    source.detune.value = noteValue * 100;\n\n    source.connect(audioContext.destination);\n    source.start(0);\n  }\n")),"\n",a.createElement(t.p,null,"Unfortunately, some older web browsers do not support this detune property. Luckily, we can use the playbackRate to shift the pitch as a fallback. I learned this technique from ",a.createElement(t.a,{href:"https://zpl.fi/pitch-shifting-in-web-audio-api/"},"Tuomas's excellent blog post about Pitch Shifting"),". So we can tweak our ",a.createElement(t.code,null,"playTone()")," function to include this fallback for older versions of Safari:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-ts"},"  playTone(noteValue: number, sample: AudioBuffer) {\n    const source = audioContext.createBufferSource();\n    source.buffer = sample;\n\n    // first try to use the detune property for pitch shifting\n    if (source.detune) {\n      source.detune.value = noteValue * 100;\n    } else {\n      // fallback to using playbackRate for pitch shifting\n      source.playbackRate.value = 2 ** (noteValue / 12);\n    }\n\n    source.connect(audioContext.destination);\n    source.start(0);\n  }\n")),"\n",a.createElement(t.p,null,"I made sure to write some unit tests around this logic to ensure that I'm doing the math right and choosing the right sample and note value to play. You can see these unit tests here: ",a.createElement(t.a,{href:"https://github.com/gregjopa/piano-flash-cards/blob/main/src/audio.test.ts"},"https://github.com/gregjopa/piano-flash-cards/blob/main/src/audio.test.ts")),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-ts"},'// playNote(noteValue, octave)\n\n// B4 should use sample C5 for the best sound with pitch shifting\ntest("B4", () => {\n  audioPlayer.playNote(11, 4);\n  expect(mockedPlayTone.mock.calls[0]).toEqual([-1, mockedSamples.C5]);\n});\n\n// G6 should use sample C7 for the best sound with pitch shifting\ntest("G6", () => {\n  audioPlayer.playNote(7, 6);\n  expect(mockedPlayTone.mock.calls[0]).toEqual([-5, mockedSamples.C7]);\n});\n')),"\n",a.createElement(t.h3,null,"Playing Chords to communicate Success and Failure"),"\n",a.createElement(t.p,null,"One fun thing I wanted to do was use sound to help reinforce when a guess was successful or not. A power chord is a happy sounding chord, so I play that when the user guesses the right note. So, if the user successfully guesses C, I'll play that C note, a fifth above which is G, and then the C note an octave above or below."),"\n",a.createElement(t.p,null,"For an incorrect guess I wanted to use the most off-putting chord possible, so I chose a diminished chord. So, if the user guessed wrong for a C note, I'll play that C note, a minor third above which is Eb, and a diminished fifth which would be Gb."),"\n",a.createElement(t.h3,null,"Learnings"),"\n",a.createElement(t.p,null,"There are a couple things I learned when implementing this behavior with the Web Audio API:"),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"You cannot play audio until the user clicks on something on your webpage. The audio clock is technically suspended until this user interaction happens. I guarded against this by using the ",a.createElement(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume"},"resume")," feature of the AudioContext like so:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"// ensure the audioContext is active before playing sound\naudioContext.resume().then(() => {\n  source.start(0);\n});\n")),"\n",a.createElement(t.ol,{start:"2"},"\n",a.createElement(t.li,null,"AudioBuffers are designed to be stored in memory. The audio samples are only a few seconds long. So, the best user experience is to load all the audio samples on page load and then reference them from memory when needed."),"\n"),"\n",a.createElement(t.h3,null,"Final Thoughts"),"\n",a.createElement(t.p,null,"I had a blast adding audio to this application. Please give it a try and share your thoughts on the ",a.createElement(t.a,{href:"https://github.com/gregjopa/piano-flash-cards"},"GitHub repo"),"!"))}var s=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?a.createElement(t,e,a.createElement(l,e)):l(e)},i=n(8804);function c(e){return a.createElement(i.Z,e,a.createElement(s,e))}i.Z},2545:function(e,t,n){var a=n(8733),o=n(795);const r=e=>{let{href:t,text:n}=e;return t?(0,a.tZ)("a",{href:t,target:"_blank",rel:"noopener noreferrer",sx:{minWidth:"225px",fontSize:2,px:5,py:3,mb:[4,0],color:"primary",backgroundColor:"background",border:"1px solid",borderColor:"primary",textAlign:"center",textDecoration:"none",":hover, :focus":{backgroundColor:"primary",color:"white"}}},n):null};t.Z=function(e){let{downloadLink:t,demoLink:n,downloadText:l="Download",demoText:s="Demo"}=e;return(0,a.tZ)(o.W2,{sx:{maxWidth:"650px",display:"flex",flexWrap:"wrap",justifyContent:"space-evenly"}},(0,a.tZ)(r,{href:t,text:l}),(0,a.tZ)(r,{href:n,text:s}))}}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-home-runner-work-gregjopa-github-io-gregjopa-github-io-content-posts-piano-sounds-with-web-audio-api-index-mdx-a7eadcacfc9048f48f51.js.map